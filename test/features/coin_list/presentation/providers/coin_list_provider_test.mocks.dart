// Mocks generated by Mockito 5.4.2 from annotations
// in coin_tracker_app/test/features/coin_list/presentation/providers/coin_list_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:coin_tracker_app/src/core/errors/failure.dart' as _i6;
import 'package:coin_tracker_app/src/core/usecases/usecase.dart' as _i8;
import 'package:coin_tracker_app/src/features/coin_list/domain/entities/asset_with_icon_entity.dart'
    as _i7;
import 'package:coin_tracker_app/src/features/coin_list/domain/entities/exchange_rate_entity.dart'
    as _i10;
import 'package:coin_tracker_app/src/features/coin_list/domain/repositories/coin_list_repository.dart'
    as _i2;
import 'package:coin_tracker_app/src/features/coin_list/domain/usecases/get_historical_exchange_rate.dart'
    as _i9;
import 'package:coin_tracker_app/src/features/coin_list/domain/usecases/get_list_of_assets_with_icon.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCoinListRepository_0 extends _i1.SmartFake
    implements _i2.CoinListRepository {
  _FakeCoinListRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetListOfAssetsWithIcon].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetListOfAssetsWithIcon extends _i1.Mock
    implements _i4.GetListOfAssetsWithIcon {
  @override
  _i2.CoinListRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCoinListRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeCoinListRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CoinListRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.AssetWithIcon>>> call(
          _i8.NoParams? noParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [noParams],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.AssetWithIcon>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.AssetWithIcon>>(
          this,
          Invocation.method(
            #call,
            [noParams],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.AssetWithIcon>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.AssetWithIcon>>(
          this,
          Invocation.method(
            #call,
            [noParams],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.AssetWithIcon>>>);
}

/// A class which mocks [GetHistoricalExchangeRate].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetHistoricalExchangeRate extends _i1.Mock
    implements _i9.GetHistoricalExchangeRate {
  @override
  _i2.CoinListRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCoinListRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeCoinListRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.CoinListRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i10.ExchangeRate>>> call(
          _i9.Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.ExchangeRate>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.ExchangeRate>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.ExchangeRate>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.ExchangeRate>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i10.ExchangeRate>>>);
}
